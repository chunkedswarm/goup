// Copyright 2019 Torben Schinke
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"fmt"
	"io/ioutil"
	"path/filepath"
	"strconv"
	"strings"
)

// A Version represents a semver version
type Version struct {
	Major int64
	Minor int64
	Micro int64
}

func (v Version) String() string {
	return "v" + strconv.Itoa(int(v.Major)) + "." + strconv.Itoa(int(v.Minor)) + "." + strconv.Itoa(int(v.Micro))
}

// IsNewer if this version is newer or higher than the other
func (v Version) IsNewer(other Version) bool {
	if v.Major > other.Major {
		return true
	}
	if v.Minor > other.Minor {
		return true
	}
	if v.Micro > other.Micro {
		return true
	}
	return false
}

// ParseSemanticVersion reads strings like v0.1.2 or 0.1.2
func ParseSemanticVersion(str string) (Version, error) {
	str = strings.TrimSpace(str)
	if strings.HasPrefix(str, "v") {
		str = str[1:]
	}
	msg := "failed to parse version: %s: %v"
	tokens := strings.Split(str, ".")
	if len(tokens) != 3 {
		return Version{}, fmt.Errorf("failed to parse version: %s", str)
	}
	major, err := strconv.ParseInt(tokens[0], 10, 64)
	if err != nil {
		return Version{}, fmt.Errorf(msg, str, err)
	}
	minor, err := strconv.ParseInt(tokens[1], 10, 64)
	if err != nil {
		return Version{}, fmt.Errorf(msg, str, err)
	}

	micro, err := strconv.ParseInt(tokens[2], 10, 64)
	if err != nil {
		return Version{}, fmt.Errorf(msg, str, err)
	}

	return Version{major, minor, micro}, nil
}

// A VendoredModule represents an entry from modules.txt, as generated by go mod vendor
// e.g.
//    # github.com/worldiety/std v0.0.0-20190429141453-4964c97755c6
//    github.com/worldiety/std
type VendoredModule struct {
	// ModuleName is the actual name of the module
	ModuleName string
	// Version is the semantic version, usually 0.0.0 if tip of repo should be used
	Version Version
	// ModuleImport is probably the url from where to get the module data
	ModuleImport string

	// Local determines the fully qualified local path
	Local Path
}

// ParseModulesTxT parsed the modules.txt, as generated by go mod-vendor
func ParseModulesTxT(fname string) ([]VendoredModule, error) {
	//there is no modules.txt if there are no dependencies, that is valid
	if !Path(fname).Exists() {
		return nil, nil
	}
	text, err := ioutil.ReadFile(fname)
	if err != nil {
		return nil, fmt.Errorf("unable to parse module.txt: %v", err)
	}

	res := make([]VendoredModule, 0)

	lines := strings.Split(string(text), "\n")
	for i := 0; i < len(lines); i += 2 {
		unescapedComment := strings.TrimSpace(lines[i])
		if len(unescapedComment) < 1 {
			continue
		}
		unescapedComment = strings.TrimSpace(unescapedComment[1:])
		if len(unescapedComment) < 1 {
			continue
		}
		pathVersionTokens := strings.Split(unescapedComment, " ")
		if len(pathVersionTokens) < 2 {
			fmt.Printf("%s: invalid path-version at line %d: %s", fname, i, lines[i])
			continue
		}
		modImportURL := pathVersionTokens[0]
		versionTokens := strings.Split(pathVersionTokens[1], "-")
		if len(versionTokens) < 1 {
			fmt.Printf("%s: invalid version string at line %d: %s", fname, i, lines[i])
			continue
		}

		version, err := ParseSemanticVersion(versionTokens[0])
		if err != nil {
			fmt.Printf("%s: invalid version string at line %d: %s: %v", fname, i, lines[i], err)
			continue
		}
		modName := lines[i+1]
		path := Path(filepath.Dir(fname)).Add(Path(modName))
		res = append(res, VendoredModule{Version: version, ModuleName: modName, ModuleImport: modImportURL, Local: path})
	}
	return res, nil
}
